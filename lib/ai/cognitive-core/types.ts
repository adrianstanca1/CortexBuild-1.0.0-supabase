/**
 * Cognitive Core Types
 * Type definitions for the AI Cognitive Nucleus
 */

export type RiskLevel = 'low' | 'medium' | 'high' | 'critical' | 'systemic';
export type ActionPriority = 'immediate' | 'short_term' | 'strategic';
export type AgentType = 'hse_sentinel' | 'project_controls' | 'financial_forecaster' | 'commercial_guardian' | 'quality_inspector';

/**
 * Event from AI agents
 */
export interface AgentEvent {
    id: string;
    agentType: AgentType;
    timestamp: Date;
    eventType: string;
    severity: 'info' | 'warning' | 'critical';
    location?: string;
    entity?: {
        type: 'project' | 'subcontractor' | 'activity' | 'zone';
        id: string;
        name: string;
    };
    data: Record<string, any>;
    metadata?: Record<string, any>;
}

/**
 * Detected pattern from historical analysis
 */
export interface DetectedPattern {
    id: string;
    patternType: 'recurring_issue' | 'performance_degradation' | 'safety_violation' | 'cost_overrun' | 'schedule_delay';
    occurrences: AgentEvent[];
    frequency: number;
    timespan: {
        start: Date;
        end: Date;
    };
    confidence: number; // 0-1
    riskLevel: RiskLevel;
    affectedEntities: Array<{
        type: string;
        id: string;
        name: string;
    }>;
}

/**
 * Cross-agent query for root cause analysis
 */
export interface CrossAgentQuery {
    targetAgent: AgentType;
    question: string;
    context: Record<string, any>;
    priority: 'normal' | 'urgent';
}

/**
 * Response from cross-agent query
 */
export interface CrossAgentResponse {
    agentType: AgentType;
    question: string;
    answer: string;
    data: Record<string, any>;
    confidence: number;
    timestamp: Date;
}

/**
 * Root cause hypothesis generated by AI
 */
export interface RootCauseHypothesis {
    id: string;
    pattern: DetectedPattern;
    hypothesis: string;
    supportingEvidence: CrossAgentResponse[];
    confidence: number;
    riskAssessment: {
        level: RiskLevel;
        impactAreas: string[];
        potentialConsequences: string[];
        financialImpact?: {
            min: number;
            max: number;
            currency: string;
        };
    };
    generatedAt: Date;
}

/**
 * Strategic action recommendation
 */
export interface StrategicAction {
    id: string;
    priority: ActionPriority;
    category: 'safety' | 'commercial' | 'operational' | 'strategic';
    title: string;
    description: string;
    steps: Array<{
        order: number;
        action: string;
        assignedTo?: string;
        deadline?: Date;
        dependencies?: string[];
    }>;
    expectedOutcome: string;
    risks: string[];
    estimatedCost?: number;
    estimatedDuration?: string;
}

/**
 * Complete strategic response from Cognitive Core
 */
export interface CognitiveResponse {
    id: string;
    triggerEvent: AgentEvent;
    detectedPattern: DetectedPattern;
    rootCauseAnalysis: {
        queries: CrossAgentQuery[];
        responses: CrossAgentResponse[];
        hypothesis: RootCauseHypothesis;
    };
    strategicPlan: {
        summary: string;
        immediateActions: StrategicAction[];
        shortTermActions: StrategicAction[];
        strategicActions: StrategicAction[];
    };
    notifications: Array<{
        recipient: string;
        channel: 'email' | 'sms' | 'in_app' | 'urgent';
        message: string;
        priority: 'low' | 'medium' | 'high' | 'critical';
    }>;
    generatedAt: Date;
    expiresAt?: Date;
}

/**
 * Historical context for pattern detection
 */
export interface HistoricalContext {
    projectId: string;
    timeWindow: {
        start: Date;
        end: Date;
    };
    events: AgentEvent[];
    patterns: DetectedPattern[];
    previousHypotheses: RootCauseHypothesis[];
}

/**
 * Agent capability definition
 */
export interface AgentCapability {
    agentType: AgentType;
    name: string;
    description: string;
    queryTypes: string[];
    dataAccess: string[];
    responseFormat: string;
}

/**
 * Cognitive Core configuration
 */
export interface CognitiveConfig {
    patternDetection: {
        minOccurrences: number;
        timeWindowDays: number;
        confidenceThreshold: number;
    };
    rootCauseAnalysis: {
        maxQueries: number;
        queryTimeout: number;
        minConfidence: number;
    };
    actionGeneration: {
        maxActionsPerLevel: number;
        requireApproval: boolean;
        autoExecute: string[];
    };
    notifications: {
        channels: string[];
        escalationRules: Record<RiskLevel, string[]>;
    };
}

